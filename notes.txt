Eq: is an alternative to Java equals method
    val intEquality = Eq[Int]
    val aTypeSafeComparison = intEquality.eqv(2, 3) // return false


Functor: is a type class that abstracts over type constructors that can be mapâ€˜ed over. Examples of such type constructors are List, Option, and Future.
    val listFunctor: Functor[List] = Functor[List]
    val incrementedNumbers = listFunctor.map(List(2, 3, 4))(_ + 1)  // List(3, 4, 5)

Applicatives = Functors + the pure method


Monads: (Monads extends Applicative, Applicative extends Functor)
 /*
  * Pattern
  * -wrapping a value into a M value
  * -the flatMap mechanism transform the value wrapped in a new value also wrapped by a M
  * */
    val listMonad = Monad[List]
    val aList = listMonad.pure(3) // List(3)
    val aTransformedList = listMonad.flatMap(aList)(x => List(x, x + 1))  // List(3, 4)


Semigroups: COMBINE elements of the same type
    val naturalIntSemigroup: Semigroup[Int] = Semigroup[Int]
    val intCombination: Int = naturalIntSemigroup.combine(2, 46) // addition


Monoid: extends the power of Semigroup by providing an additional empty value.
    val intMonoid = Monoid[Int]
    val combineInt = intMonoid.combine(23, 999)  // 1022
    val zero = intMonoid.empty  // 0


